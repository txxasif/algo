{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/Bubble/bubble.js","sortingAlgorithms/InsertionSort/insertio.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","Bubble_Sort","arr","ar","animation","o","p","x","Insertion_Sort","ani","n","key","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","console","log","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","bar","barColor","y","barHeight","ani1","ani2","x1","y1","javaScriptSortedArray","sort","a","b","mergeSortedArray","arraysAreEqual","className","map","value","idx","onClick","mergeSort","quickSort","insertionSort","bubbleSort","testSortingAlgorithms","React","Component","min","max","random","arrayOne","arrayTwo","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAAO,SAASA,EAAuBC,GACrC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,IAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAIpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAxDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,E,UCcMgB,EAnBK,SAACC,GAIrB,IAHI,IAAIC,EAAKD,EAELE,EAAY,CAAC,CAAC,EAAE,IAChBP,EAAI,EAAEA,EAAEM,EAAGjB,OAAO,EAAEW,IACxB,IAAI,IAAIC,EAAI,EAAEA,EAAEK,EAAGjB,OAAOW,EAAE,EAAEC,IAC1B,GAAGK,EAAGL,GAAGK,EAAGL,EAAE,GAAI,CACd,IAAMO,EAAIF,EAAGL,GAAKQ,EAAIH,EAAGL,EAAE,GAC3BM,EAAUL,KAAK,CAACD,EAAEA,EAAE,IAEpBM,EAAUL,KAAK,CAACM,EAAEC,IAClB,IAAIC,EAAIJ,EAAGL,GACXK,EAAGL,GAAKK,EAAGL,EAAE,GACbK,EAAGL,EAAE,GAAKS,EAItB,OAAOH,GCGQI,EApBQ,SAACN,GAIpB,IAHA,IAAIO,EAAM,GACNN,EAAKD,EACLQ,EAAIR,EAAIhB,OACJW,EAAI,EAAEA,EAAEa,EAAEb,IAAK,CACnB,IAAMc,EAAMR,EAAGN,GACXC,EAAID,EAAE,EAEV,IADAY,EAAIV,KAAK,CAACF,GAAG,IACPC,GAAG,GAAKa,EAAIR,EAAGL,IAEjBW,EAAIV,KAAK,CAACD,EAAE,EAAEK,EAAGL,KACjBK,EAAGL,EAAE,GAAKK,EAAGL,GACbA,IAEJW,EAAIV,KAAK,CAACD,EAAE,EAAEa,IACdR,EAAGL,EAAE,GAAKa,EAEd,OAAOF,GCAUG,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACX9B,MAAO,IAJQ,E,iFASjB+B,KAAKC,e,mCAKL,IADA,IAAMhC,EAAQ,GACLa,EAAI,EAAGA,EAvBS,IAuBiBA,IACxCb,EAAMe,KAAKkB,EAAsB,EAAG,MAEtCF,KAAKG,SAAS,CAAClC,Y,kCAMf,IAAMC,EAAaF,EAAuBgC,KAAKD,MAAM9B,OAC/CmC,EAAYC,SAASC,uBAAuB,aAClDC,QAAQC,IAAIJ,GACZ,IANU,eAMDtB,GAEP,GADsBA,EAAI,IAAM,EACb,CAAC,IAAD,cACcZ,EAAWY,GADzB,GACV2B,EADU,KACCC,EADD,KAEXC,EAAcP,EAAUK,GAAWG,MACnCC,EAAcT,EAAUM,GAAWE,MACnCE,EAAQhC,EAAI,IAAM,EAnCR,MAHF,YAuCdiC,YAAW,WACTJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA/Cb,IAgDhBhC,QAEHiC,YAAW,WAAO,IAAD,cACgB7C,EAAWY,GAD3B,GACR2B,EADQ,KACGQ,EADH,KAEKb,EAAUK,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QArDiB,IAsDhBnC,IAhBEA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,2EAyBP,IAAMY,EAAMD,EAAeO,KAAKD,MAAM9B,OAChCkD,EAAMd,SAASC,uBAAuB,aAC5CC,QAAQC,IAAI,MAAOd,GACnB,IAJY,eAIJZ,GAEN,IAAW,IADHY,EAAIZ,GACP,GAAS,CAAC,IAAD,cACEY,EAAIZ,GADN,GACLU,EADK,KAEN4B,GAFM,KAEKD,EAAI3B,GAAGoB,OACxBG,YAAW,WACTK,EAASJ,gBA/DG,QAgEV,GAAFlC,QAGFiC,YAAW,WAAK,IAAD,cACFrB,EAAIZ,GADF,GACTU,EADS,KACP6B,EADO,KAETD,EAAWD,EAAI3B,GAAGoB,MAClBU,EAAYH,EAAI3B,GAAGoB,MACnBM,EAASG,EACbD,EAASJ,gBAxEG,MAyEZM,EAAUJ,OAAV,UAAsBA,EAAtB,QACE,GAAFpC,IAjBEA,EAAI,EAAEA,EAAEY,EAAIvB,OAAOW,IAAK,GAAxBA,M,uEA6BV,IAAMqC,EAAMd,SAASC,uBAAuB,aACtCjB,EAAYH,EAAYc,KAAKD,MAAM9B,OACzCsC,QAAQC,IAAInB,EAAU,MACtBkB,QAAQC,IAAIW,EAAI,MAEhB,IAAI,IAAIrC,EAAI,EAAIA,EAAEO,EAAUlB,OAAOW,IAC5BA,EAAE,IAAM,EAAI,WAAD,kBACCO,EAAUP,GADX,GACNU,EADM,KACJ6B,EADI,KAEPE,EAAOJ,EAAI3B,GAAGoB,MACdY,EAAOL,EAAIE,GAAGT,MACpBG,YAAW,WACTQ,EAAKP,gBAAkB,MACvBQ,EAAKR,gBAAkB,SAErB,GAAFlC,GARY,GAWT,WAAD,kBACWO,EAAUP,GADrB,GACIU,EADJ,KACM6B,EADN,mBAEYhC,EAAUP,EAAE,GAFxB,GAEG2C,EAFH,KAEMC,EAFN,KAGGH,EAAOJ,EAAIM,GAAIb,MACfY,EAAOL,EAAIO,GAAId,MACrBG,YAAW,WACTQ,EAAKL,OAAL,UAAiBG,EAAjB,MACAG,EAAKN,OAAL,UAAiB1B,EAAjB,QACG,GAAFV,GARC,K,8CAyBV,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,IAAK,CAG5B,IAFA,IAAMb,EAAQ,GACRE,EAAS+B,EAAsB,EAAG,KAC/BpB,EAAI,EAAGA,EAAIX,EAAQW,IAC1Bb,EAAMe,KAAKkB,GAAuB,IAAM,MAE1C,IAAMyB,EAAwB1D,EAAMI,QAAQuD,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACzDC,EAAmB/D,EAAuBC,EAAMI,SACtDkC,QAAQC,IAAIwB,EAAeL,EAAuBI,O,+BAI5C,IAAD,OACA9D,EAAS+B,KAAKD,MAAd9B,MAEP,OACE,yBAAKgE,UAAU,mBACZhE,EAAMiE,KAAI,SAACC,EAAOC,GAAR,OACT,yBACEH,UAAU,YACVrC,IAAKwC,EACLxB,MAAO,CACLI,gBAzJQ,YA0JRE,OAAO,GAAD,OAAKiB,EAAL,YAGZ,6BACA,4BAAQE,QAAS,kBAAM,EAAKpC,eAA5B,sBACA,4BAAQoC,QAAS,kBAAM,EAAKC,cAA5B,cACA,4BAAQD,QAAS,kBAAM,EAAKE,cAA5B,cACA,4BAAQF,QAAS,kBAAM,EAAKG,kBAA5B,kBACA,4BAAQH,QAAS,kBAAM,EAAKI,eAA5B,eACA,4BAAQJ,QAAS,kBAAM,EAAKK,0BAA5B,0C,GA9JuCC,IAAMC,WAwKrD,SAAS1C,EAAsB2C,EAAKC,GAElC,OAAOnE,KAAKC,MAAMD,KAAKoE,UAAYD,EAAMD,EAAM,GAAKA,GAGtD,SAASb,EAAegB,EAAUC,GAChC,GAAID,EAAS7E,SAAW8E,EAAS9E,OAAQ,OAAO,EAChD,IAAK,IAAIW,EAAI,EAAGA,EAAIkE,EAAS7E,OAAQW,IACnC,GAAIkE,EAASlE,KAAOmE,EAASnE,GAC3B,OAAO,EAGX,OAAO,E,MCzLMoE,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpD,SAASqD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eae8c02a.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  \n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","const Bubble_Sort = (arr) => {\r\n    var ar = arr;\r\n    var xx;\r\n    var animation = [[1,1]];\r\nfor(let i = 0;i<ar.length-1;i++) {\r\n    for(let j = 0;j<ar.length-i-1;j++) {\r\n        if(ar[j]>ar[j+1]) {\r\n            const o = ar[j] , p = ar[j+1];\r\n            animation.push([j,j+1]);\r\n           // animation.push(j,j+1);\r\n            animation.push([o,p])\r\n            var x = ar[j];\r\n            ar[j] = ar[j+1];\r\n            ar[j+1] = x;\r\n        }\r\n    }\r\n}\r\nreturn animation;\r\n}\r\nexport default Bubble_Sort;","const Insertion_Sort = (arr) => {\r\n    var ani = [];\r\n    var ar = arr;\r\n    var n = arr.length;\r\n    for(let i = 1;i<n;i++) {\r\n        const key = ar[i];\r\n        var j = i-1;\r\n        ani.push([i,-1]);\r\n        while(j>=0 && key<ar[j]) {\r\n            \r\n            ani.push([j+1,ar[j]]);\r\n            ar[j+1] = ar[j];\r\n            j--;\r\n        }\r\n        ani.push([j+1,key]);\r\n        ar[j+1] = key;\r\n    }\r\n    return ani;\r\n\r\n}\r\nexport default Insertion_Sort;","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\nimport Bubble_Sort from '../sortingAlgorithms/Bubble/bubble';\nimport Insertion_Sort from '../sortingAlgorithms/InsertionSort/insertio';\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 400;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 700));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n  \n    \n    const animations = getMergeSortAnimations(this.state.array);\n    const arrayBars = document.getElementsByClassName('array-bar');\n    console.log(arrayBars);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n  \n  }\n  insertionSort() {\n      const ani = Insertion_Sort(this.state.array);\n      const bar = document.getElementsByClassName('array-bar');\n      console.log('aaa', ani);\n      for(let i = 0;i<ani.length;i++) {\n        var z = ani[i];\n        if(z[1]===-1) {\n          const [x,y] = ani[i];\n          const barColor = bar[x].style;\n          setTimeout(()=>{\n            barColor.backgroundColor = SECONDARY_COLOR;\n          },i*40);\n        } else{\n          \n          setTimeout(()=>{\n          const[x,y] = ani[i];\n          const barColor = bar[x].style;\n          const barHeight = bar[x].style;\n          const height = y;\n            barColor.backgroundColor = SECONDARY_COLOR;\n            barHeight.height = `${height}px`;\n          },i*40)\n        }\n      }\n      \n      \n      \n  }\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    const bar = document.getElementsByClassName('array-bar');\n    const animation = Bubble_Sort(this.state.array);\n    console.log(animation,'ss');\n    console.log(bar,'..');\n    \n    for(let i = 1 ; i<animation.length;i++) {\n        if(i%2 !== 0) {\n         const [x,y] = animation[i];\n         const ani1 = bar[x].style;\n         const ani2 = bar[y].style;\n         setTimeout(()=>{\n           ani1.backgroundColor = 'red';\n           ani2.backgroundColor = 'blue';\n\n         },i*10)\n         \n         \n        }else{\n          const [x,y] = animation[i];\n          const[x1,y1] = animation[i-1];\n          const ani1 = bar[x1].style;\n          const ani2 = bar[y1].style;\n          setTimeout(() => {\n            ani1.height = `${y}px`;\n            ani2.height = `${x}px`;\n          }, i*10);\n\n\n        }\n        \n      \n     \n     /// console.log(x,'....');\n      \n    }\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n  }}></div>\n        ))}\n        <div>\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.insertionSort()}>Insertion_Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.testSortingAlgorithms()}>\n          Test Sorting Algorithms (BROKEN)\n        </button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}